/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PriceRecordService } from "../priceRecord.service";
import { PriceRecordCreateInput } from "./PriceRecordCreateInput";
import { PriceRecord } from "./PriceRecord";
import { PriceRecordFindManyArgs } from "./PriceRecordFindManyArgs";
import { PriceRecordWhereUniqueInput } from "./PriceRecordWhereUniqueInput";
import { PriceRecordUpdateInput } from "./PriceRecordUpdateInput";

export class PriceRecordControllerBase {
  constructor(protected readonly service: PriceRecordService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PriceRecord })
  async createPriceRecord(
    @common.Body() data: PriceRecordCreateInput
  ): Promise<PriceRecord> {
    return await this.service.createPriceRecord({
      data: {
        ...data,

        financialInstrument: data.financialInstrument
          ? {
              connect: data.financialInstrument,
            }
          : undefined,
      },
      select: {
        asOf: true,
        createdAt: true,

        financialInstrument: {
          select: {
            id: true,
          },
        },

        id: true,
        payload: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PriceRecord] })
  @ApiNestedQuery(PriceRecordFindManyArgs)
  async priceRecords(@common.Req() request: Request): Promise<PriceRecord[]> {
    const args = plainToClass(PriceRecordFindManyArgs, request.query);
    return this.service.priceRecords({
      ...args,
      select: {
        asOf: true,
        createdAt: true,

        financialInstrument: {
          select: {
            id: true,
          },
        },

        id: true,
        payload: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PriceRecord })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async priceRecord(
    @common.Param() params: PriceRecordWhereUniqueInput
  ): Promise<PriceRecord | null> {
    const result = await this.service.priceRecord({
      where: params,
      select: {
        asOf: true,
        createdAt: true,

        financialInstrument: {
          select: {
            id: true,
          },
        },

        id: true,
        payload: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PriceRecord })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePriceRecord(
    @common.Param() params: PriceRecordWhereUniqueInput,
    @common.Body() data: PriceRecordUpdateInput
  ): Promise<PriceRecord | null> {
    try {
      return await this.service.updatePriceRecord({
        where: params,
        data: {
          ...data,

          financialInstrument: data.financialInstrument
            ? {
                connect: data.financialInstrument,
              }
            : undefined,
        },
        select: {
          asOf: true,
          createdAt: true,

          financialInstrument: {
            select: {
              id: true,
            },
          },

          id: true,
          payload: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PriceRecord })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePriceRecord(
    @common.Param() params: PriceRecordWhereUniqueInput
  ): Promise<PriceRecord | null> {
    try {
      return await this.service.deletePriceRecord({
        where: params,
        select: {
          asOf: true,
          createdAt: true,

          financialInstrument: {
            select: {
              id: true,
            },
          },

          id: true,
          payload: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PriceRecord } from "./PriceRecord";
import { PriceRecordCountArgs } from "./PriceRecordCountArgs";
import { PriceRecordFindManyArgs } from "./PriceRecordFindManyArgs";
import { PriceRecordFindUniqueArgs } from "./PriceRecordFindUniqueArgs";
import { CreatePriceRecordArgs } from "./CreatePriceRecordArgs";
import { UpdatePriceRecordArgs } from "./UpdatePriceRecordArgs";
import { DeletePriceRecordArgs } from "./DeletePriceRecordArgs";
import { FinancialInstrument } from "../../financialInstrument/base/FinancialInstrument";
import { PriceRecordService } from "../priceRecord.service";
@graphql.Resolver(() => PriceRecord)
export class PriceRecordResolverBase {
  constructor(protected readonly service: PriceRecordService) {}

  async _priceRecordsMeta(
    @graphql.Args() args: PriceRecordCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PriceRecord])
  async priceRecords(
    @graphql.Args() args: PriceRecordFindManyArgs
  ): Promise<PriceRecord[]> {
    return this.service.priceRecords(args);
  }

  @graphql.Query(() => PriceRecord, { nullable: true })
  async priceRecord(
    @graphql.Args() args: PriceRecordFindUniqueArgs
  ): Promise<PriceRecord | null> {
    const result = await this.service.priceRecord(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PriceRecord)
  async createPriceRecord(
    @graphql.Args() args: CreatePriceRecordArgs
  ): Promise<PriceRecord> {
    return await this.service.createPriceRecord({
      ...args,
      data: {
        ...args.data,

        financialInstrument: args.data.financialInstrument
          ? {
              connect: args.data.financialInstrument,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => PriceRecord)
  async updatePriceRecord(
    @graphql.Args() args: UpdatePriceRecordArgs
  ): Promise<PriceRecord | null> {
    try {
      return await this.service.updatePriceRecord({
        ...args,
        data: {
          ...args.data,

          financialInstrument: args.data.financialInstrument
            ? {
                connect: args.data.financialInstrument,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PriceRecord)
  async deletePriceRecord(
    @graphql.Args() args: DeletePriceRecordArgs
  ): Promise<PriceRecord | null> {
    try {
      return await this.service.deletePriceRecord(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => FinancialInstrument, {
    nullable: true,
    name: "financialInstrument",
  })
  async getFinancialInstrument(
    @graphql.Parent() parent: PriceRecord
  ): Promise<FinancialInstrument | null> {
    const result = await this.service.getFinancialInstrument(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}

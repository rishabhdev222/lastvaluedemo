/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  PriceRecord as PrismaPriceRecord,
  FinancialInstrument as PrismaFinancialInstrument,
} from "@prisma/client";

export class PriceRecordServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PriceRecordCountArgs, "select">
  ): Promise<number> {
    return this.prisma.priceRecord.count(args);
  }

  async priceRecords<T extends Prisma.PriceRecordFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PriceRecordFindManyArgs>
  ): Promise<PrismaPriceRecord[]> {
    return this.prisma.priceRecord.findMany<Prisma.PriceRecordFindManyArgs>(
      args
    );
  }
  async priceRecord<T extends Prisma.PriceRecordFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PriceRecordFindUniqueArgs>
  ): Promise<PrismaPriceRecord | null> {
    return this.prisma.priceRecord.findUnique(args);
  }
  async createPriceRecord<T extends Prisma.PriceRecordCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PriceRecordCreateArgs>
  ): Promise<PrismaPriceRecord> {
    return this.prisma.priceRecord.create<T>(args);
  }
  async updatePriceRecord<T extends Prisma.PriceRecordUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PriceRecordUpdateArgs>
  ): Promise<PrismaPriceRecord> {
    return this.prisma.priceRecord.update<T>(args);
  }
  async deletePriceRecord<T extends Prisma.PriceRecordDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PriceRecordDeleteArgs>
  ): Promise<PrismaPriceRecord> {
    return this.prisma.priceRecord.delete(args);
  }

  async getFinancialInstrument(
    parentId: string
  ): Promise<PrismaFinancialInstrument | null> {
    return this.prisma.priceRecord
      .findUnique({
        where: { id: parentId },
      })
      .financialInstrument();
  }
}

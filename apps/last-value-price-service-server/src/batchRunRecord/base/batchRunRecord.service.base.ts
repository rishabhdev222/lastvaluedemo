/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  BatchRunRecord as PrismaBatchRunRecord,
  BatchRun as PrismaBatchRun,
} from "@prisma/client";

export class BatchRunRecordServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BatchRunRecordCountArgs, "select">
  ): Promise<number> {
    return this.prisma.batchRunRecord.count(args);
  }

  async batchRunRecords<T extends Prisma.BatchRunRecordFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.BatchRunRecordFindManyArgs>
  ): Promise<PrismaBatchRunRecord[]> {
    return this.prisma.batchRunRecord.findMany<Prisma.BatchRunRecordFindManyArgs>(
      args
    );
  }
  async batchRunRecord<T extends Prisma.BatchRunRecordFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.BatchRunRecordFindUniqueArgs>
  ): Promise<PrismaBatchRunRecord | null> {
    return this.prisma.batchRunRecord.findUnique(args);
  }
  async createBatchRunRecord<T extends Prisma.BatchRunRecordCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BatchRunRecordCreateArgs>
  ): Promise<PrismaBatchRunRecord> {
    return this.prisma.batchRunRecord.create<T>(args);
  }
  async updateBatchRunRecord<T extends Prisma.BatchRunRecordUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BatchRunRecordUpdateArgs>
  ): Promise<PrismaBatchRunRecord> {
    return this.prisma.batchRunRecord.update<T>(args);
  }
  async deleteBatchRunRecord<T extends Prisma.BatchRunRecordDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.BatchRunRecordDeleteArgs>
  ): Promise<PrismaBatchRunRecord> {
    return this.prisma.batchRunRecord.delete(args);
  }

  async getBatchRun(parentId: string): Promise<PrismaBatchRun | null> {
    return this.prisma.batchRunRecord
      .findUnique({
        where: { id: parentId },
      })
      .batchRun();
  }
}

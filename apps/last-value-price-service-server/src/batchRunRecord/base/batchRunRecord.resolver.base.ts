/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { BatchRunRecord } from "./BatchRunRecord";
import { BatchRunRecordCountArgs } from "./BatchRunRecordCountArgs";
import { BatchRunRecordFindManyArgs } from "./BatchRunRecordFindManyArgs";
import { BatchRunRecordFindUniqueArgs } from "./BatchRunRecordFindUniqueArgs";
import { CreateBatchRunRecordArgs } from "./CreateBatchRunRecordArgs";
import { UpdateBatchRunRecordArgs } from "./UpdateBatchRunRecordArgs";
import { DeleteBatchRunRecordArgs } from "./DeleteBatchRunRecordArgs";
import { BatchRun } from "../../batchRun/base/BatchRun";
import { BatchRunRecordService } from "../batchRunRecord.service";
@graphql.Resolver(() => BatchRunRecord)
export class BatchRunRecordResolverBase {
  constructor(protected readonly service: BatchRunRecordService) {}

  async _batchRunRecordsMeta(
    @graphql.Args() args: BatchRunRecordCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [BatchRunRecord])
  async batchRunRecords(
    @graphql.Args() args: BatchRunRecordFindManyArgs
  ): Promise<BatchRunRecord[]> {
    return this.service.batchRunRecords(args);
  }

  @graphql.Query(() => BatchRunRecord, { nullable: true })
  async batchRunRecord(
    @graphql.Args() args: BatchRunRecordFindUniqueArgs
  ): Promise<BatchRunRecord | null> {
    const result = await this.service.batchRunRecord(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => BatchRunRecord)
  async createBatchRunRecord(
    @graphql.Args() args: CreateBatchRunRecordArgs
  ): Promise<BatchRunRecord> {
    return await this.service.createBatchRunRecord({
      ...args,
      data: {
        ...args.data,

        batchRun: args.data.batchRun
          ? {
              connect: args.data.batchRun,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => BatchRunRecord)
  async updateBatchRunRecord(
    @graphql.Args() args: UpdateBatchRunRecordArgs
  ): Promise<BatchRunRecord | null> {
    try {
      return await this.service.updateBatchRunRecord({
        ...args,
        data: {
          ...args.data,

          batchRun: args.data.batchRun
            ? {
                connect: args.data.batchRun,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BatchRunRecord)
  async deleteBatchRunRecord(
    @graphql.Args() args: DeleteBatchRunRecordArgs
  ): Promise<BatchRunRecord | null> {
    try {
      return await this.service.deleteBatchRunRecord(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => BatchRun, {
    nullable: true,
    name: "batchRun",
  })
  async getBatchRun(
    @graphql.Parent() parent: BatchRunRecord
  ): Promise<BatchRun | null> {
    const result = await this.service.getBatchRun(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BatchRunRecordService } from "../batchRunRecord.service";
import { BatchRunRecordCreateInput } from "./BatchRunRecordCreateInput";
import { BatchRunRecord } from "./BatchRunRecord";
import { BatchRunRecordFindManyArgs } from "./BatchRunRecordFindManyArgs";
import { BatchRunRecordWhereUniqueInput } from "./BatchRunRecordWhereUniqueInput";
import { BatchRunRecordUpdateInput } from "./BatchRunRecordUpdateInput";

export class BatchRunRecordControllerBase {
  constructor(protected readonly service: BatchRunRecordService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: BatchRunRecord })
  async createBatchRunRecord(
    @common.Body() data: BatchRunRecordCreateInput
  ): Promise<BatchRunRecord> {
    return await this.service.createBatchRunRecord({
      data: {
        ...data,

        batchRun: data.batchRun
          ? {
              connect: data.batchRun,
            }
          : undefined,
      },
      select: {
        batchRun: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        priceRecord: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [BatchRunRecord] })
  @ApiNestedQuery(BatchRunRecordFindManyArgs)
  async batchRunRecords(
    @common.Req() request: Request
  ): Promise<BatchRunRecord[]> {
    const args = plainToClass(BatchRunRecordFindManyArgs, request.query);
    return this.service.batchRunRecords({
      ...args,
      select: {
        batchRun: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        priceRecord: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: BatchRunRecord })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async batchRunRecord(
    @common.Param() params: BatchRunRecordWhereUniqueInput
  ): Promise<BatchRunRecord | null> {
    const result = await this.service.batchRunRecord({
      where: params,
      select: {
        batchRun: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        priceRecord: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: BatchRunRecord })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBatchRunRecord(
    @common.Param() params: BatchRunRecordWhereUniqueInput,
    @common.Body() data: BatchRunRecordUpdateInput
  ): Promise<BatchRunRecord | null> {
    try {
      return await this.service.updateBatchRunRecord({
        where: params,
        data: {
          ...data,

          batchRun: data.batchRun
            ? {
                connect: data.batchRun,
              }
            : undefined,
        },
        select: {
          batchRun: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          priceRecord: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: BatchRunRecord })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBatchRunRecord(
    @common.Param() params: BatchRunRecordWhereUniqueInput
  ): Promise<BatchRunRecord | null> {
    try {
      return await this.service.deleteBatchRunRecord({
        where: params,
        select: {
          batchRun: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          priceRecord: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { FinancialInstrument } from "./FinancialInstrument";
import { FinancialInstrumentCountArgs } from "./FinancialInstrumentCountArgs";
import { FinancialInstrumentFindManyArgs } from "./FinancialInstrumentFindManyArgs";
import { FinancialInstrumentFindUniqueArgs } from "./FinancialInstrumentFindUniqueArgs";
import { CreateFinancialInstrumentArgs } from "./CreateFinancialInstrumentArgs";
import { UpdateFinancialInstrumentArgs } from "./UpdateFinancialInstrumentArgs";
import { DeleteFinancialInstrumentArgs } from "./DeleteFinancialInstrumentArgs";
import { PriceRecordFindManyArgs } from "../../priceRecord/base/PriceRecordFindManyArgs";
import { PriceRecord } from "../../priceRecord/base/PriceRecord";
import { FinancialInstrumentService } from "../financialInstrument.service";
@graphql.Resolver(() => FinancialInstrument)
export class FinancialInstrumentResolverBase {
  constructor(protected readonly service: FinancialInstrumentService) {}

  async _financialInstrumentsMeta(
    @graphql.Args() args: FinancialInstrumentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [FinancialInstrument])
  async financialInstruments(
    @graphql.Args() args: FinancialInstrumentFindManyArgs
  ): Promise<FinancialInstrument[]> {
    return this.service.financialInstruments(args);
  }

  @graphql.Query(() => FinancialInstrument, { nullable: true })
  async financialInstrument(
    @graphql.Args() args: FinancialInstrumentFindUniqueArgs
  ): Promise<FinancialInstrument | null> {
    const result = await this.service.financialInstrument(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => FinancialInstrument)
  async createFinancialInstrument(
    @graphql.Args() args: CreateFinancialInstrumentArgs
  ): Promise<FinancialInstrument> {
    return await this.service.createFinancialInstrument({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => FinancialInstrument)
  async updateFinancialInstrument(
    @graphql.Args() args: UpdateFinancialInstrumentArgs
  ): Promise<FinancialInstrument | null> {
    try {
      return await this.service.updateFinancialInstrument({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FinancialInstrument)
  async deleteFinancialInstrument(
    @graphql.Args() args: DeleteFinancialInstrumentArgs
  ): Promise<FinancialInstrument | null> {
    try {
      return await this.service.deleteFinancialInstrument(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [PriceRecord], { name: "priceRecords" })
  async findPriceRecords(
    @graphql.Parent() parent: FinancialInstrument,
    @graphql.Args() args: PriceRecordFindManyArgs
  ): Promise<PriceRecord[]> {
    const results = await this.service.findPriceRecords(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}

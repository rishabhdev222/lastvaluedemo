/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FinancialInstrumentService } from "../financialInstrument.service";
import { FinancialInstrumentCreateInput } from "./FinancialInstrumentCreateInput";
import { FinancialInstrument } from "./FinancialInstrument";
import { FinancialInstrumentFindManyArgs } from "./FinancialInstrumentFindManyArgs";
import { FinancialInstrumentWhereUniqueInput } from "./FinancialInstrumentWhereUniqueInput";
import { FinancialInstrumentUpdateInput } from "./FinancialInstrumentUpdateInput";
import { PriceRecordFindManyArgs } from "../../priceRecord/base/PriceRecordFindManyArgs";
import { PriceRecord } from "../../priceRecord/base/PriceRecord";
import { PriceRecordWhereUniqueInput } from "../../priceRecord/base/PriceRecordWhereUniqueInput";

export class FinancialInstrumentControllerBase {
  constructor(protected readonly service: FinancialInstrumentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FinancialInstrument })
  async createFinancialInstrument(
    @common.Body() data: FinancialInstrumentCreateInput
  ): Promise<FinancialInstrument> {
    return await this.service.createFinancialInstrument({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [FinancialInstrument] })
  @ApiNestedQuery(FinancialInstrumentFindManyArgs)
  async financialInstruments(
    @common.Req() request: Request
  ): Promise<FinancialInstrument[]> {
    const args = plainToClass(FinancialInstrumentFindManyArgs, request.query);
    return this.service.financialInstruments({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FinancialInstrument })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async financialInstrument(
    @common.Param() params: FinancialInstrumentWhereUniqueInput
  ): Promise<FinancialInstrument | null> {
    const result = await this.service.financialInstrument({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FinancialInstrument })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFinancialInstrument(
    @common.Param() params: FinancialInstrumentWhereUniqueInput,
    @common.Body() data: FinancialInstrumentUpdateInput
  ): Promise<FinancialInstrument | null> {
    try {
      return await this.service.updateFinancialInstrument({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FinancialInstrument })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFinancialInstrument(
    @common.Param() params: FinancialInstrumentWhereUniqueInput
  ): Promise<FinancialInstrument | null> {
    try {
      return await this.service.deleteFinancialInstrument({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/priceRecords")
  @ApiNestedQuery(PriceRecordFindManyArgs)
  async findPriceRecords(
    @common.Req() request: Request,
    @common.Param() params: FinancialInstrumentWhereUniqueInput
  ): Promise<PriceRecord[]> {
    const query = plainToClass(PriceRecordFindManyArgs, request.query);
    const results = await this.service.findPriceRecords(params.id, {
      ...query,
      select: {
        asOf: true,
        createdAt: true,

        financialInstrument: {
          select: {
            id: true,
          },
        },

        id: true,
        payload: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/priceRecords")
  async connectPriceRecords(
    @common.Param() params: FinancialInstrumentWhereUniqueInput,
    @common.Body() body: PriceRecordWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      priceRecords: {
        connect: body,
      },
    };
    await this.service.updateFinancialInstrument({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/priceRecords")
  async updatePriceRecords(
    @common.Param() params: FinancialInstrumentWhereUniqueInput,
    @common.Body() body: PriceRecordWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      priceRecords: {
        set: body,
      },
    };
    await this.service.updateFinancialInstrument({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/priceRecords")
  async disconnectPriceRecords(
    @common.Param() params: FinancialInstrumentWhereUniqueInput,
    @common.Body() body: PriceRecordWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      priceRecords: {
        disconnect: body,
      },
    };
    await this.service.updateFinancialInstrument({
      where: params,
      data,
      select: { id: true },
    });
  }
}

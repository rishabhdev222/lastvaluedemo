/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  FinancialInstrument as PrismaFinancialInstrument,
  PriceRecord as PrismaPriceRecord,
} from "@prisma/client";

export class FinancialInstrumentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FinancialInstrumentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.financialInstrument.count(args);
  }

  async financialInstruments<T extends Prisma.FinancialInstrumentFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.FinancialInstrumentFindManyArgs>
  ): Promise<PrismaFinancialInstrument[]> {
    return this.prisma.financialInstrument.findMany<Prisma.FinancialInstrumentFindManyArgs>(
      args
    );
  }
  async financialInstrument<T extends Prisma.FinancialInstrumentFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.FinancialInstrumentFindUniqueArgs>
  ): Promise<PrismaFinancialInstrument | null> {
    return this.prisma.financialInstrument.findUnique(args);
  }
  async createFinancialInstrument<
    T extends Prisma.FinancialInstrumentCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.FinancialInstrumentCreateArgs>
  ): Promise<PrismaFinancialInstrument> {
    return this.prisma.financialInstrument.create<T>(args);
  }
  async updateFinancialInstrument<
    T extends Prisma.FinancialInstrumentUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.FinancialInstrumentUpdateArgs>
  ): Promise<PrismaFinancialInstrument> {
    return this.prisma.financialInstrument.update<T>(args);
  }
  async deleteFinancialInstrument<
    T extends Prisma.FinancialInstrumentDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.FinancialInstrumentDeleteArgs>
  ): Promise<PrismaFinancialInstrument> {
    return this.prisma.financialInstrument.delete(args);
  }

  async findPriceRecords(
    parentId: string,
    args: Prisma.PriceRecordFindManyArgs
  ): Promise<PrismaPriceRecord[]> {
    return this.prisma.financialInstrument
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .priceRecords(args);
  }
}

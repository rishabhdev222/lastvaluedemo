/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  BatchRun as PrismaBatchRun,
  BatchRunRecord as PrismaBatchRunRecord,
} from "@prisma/client";

export class BatchRunServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.BatchRunCountArgs, "select">): Promise<number> {
    return this.prisma.batchRun.count(args);
  }

  async batchRuns<T extends Prisma.BatchRunFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.BatchRunFindManyArgs>
  ): Promise<PrismaBatchRun[]> {
    return this.prisma.batchRun.findMany<Prisma.BatchRunFindManyArgs>(args);
  }
  async batchRun<T extends Prisma.BatchRunFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.BatchRunFindUniqueArgs>
  ): Promise<PrismaBatchRun | null> {
    return this.prisma.batchRun.findUnique(args);
  }
  async createBatchRun<T extends Prisma.BatchRunCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BatchRunCreateArgs>
  ): Promise<PrismaBatchRun> {
    return this.prisma.batchRun.create<T>(args);
  }
  async updateBatchRun<T extends Prisma.BatchRunUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BatchRunUpdateArgs>
  ): Promise<PrismaBatchRun> {
    return this.prisma.batchRun.update<T>(args);
  }
  async deleteBatchRun<T extends Prisma.BatchRunDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.BatchRunDeleteArgs>
  ): Promise<PrismaBatchRun> {
    return this.prisma.batchRun.delete(args);
  }

  async findBatchRunRecords(
    parentId: string,
    args: Prisma.BatchRunRecordFindManyArgs
  ): Promise<PrismaBatchRunRecord[]> {
    return this.prisma.batchRun
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .batchRunRecords(args);
  }
}

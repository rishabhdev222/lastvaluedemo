/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BatchRunService } from "../batchRun.service";
import { BatchRunCreateInput } from "./BatchRunCreateInput";
import { BatchRun } from "./BatchRun";
import { BatchRunFindManyArgs } from "./BatchRunFindManyArgs";
import { BatchRunWhereUniqueInput } from "./BatchRunWhereUniqueInput";
import { BatchRunUpdateInput } from "./BatchRunUpdateInput";
import { BatchRunRecordFindManyArgs } from "../../batchRunRecord/base/BatchRunRecordFindManyArgs";
import { BatchRunRecord } from "../../batchRunRecord/base/BatchRunRecord";
import { BatchRunRecordWhereUniqueInput } from "../../batchRunRecord/base/BatchRunRecordWhereUniqueInput";

export class BatchRunControllerBase {
  constructor(protected readonly service: BatchRunService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: BatchRun })
  async createBatchRun(
    @common.Body() data: BatchRunCreateInput
  ): Promise<BatchRun> {
    return await this.service.createBatchRun({
      data: data,
      select: {
        createdAt: true,
        id: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [BatchRun] })
  @ApiNestedQuery(BatchRunFindManyArgs)
  async batchRuns(@common.Req() request: Request): Promise<BatchRun[]> {
    const args = plainToClass(BatchRunFindManyArgs, request.query);
    return this.service.batchRuns({
      ...args,
      select: {
        createdAt: true,
        id: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: BatchRun })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async batchRun(
    @common.Param() params: BatchRunWhereUniqueInput
  ): Promise<BatchRun | null> {
    const result = await this.service.batchRun({
      where: params,
      select: {
        createdAt: true,
        id: true,
        status: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: BatchRun })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBatchRun(
    @common.Param() params: BatchRunWhereUniqueInput,
    @common.Body() data: BatchRunUpdateInput
  ): Promise<BatchRun | null> {
    try {
      return await this.service.updateBatchRun({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: BatchRun })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBatchRun(
    @common.Param() params: BatchRunWhereUniqueInput
  ): Promise<BatchRun | null> {
    try {
      return await this.service.deleteBatchRun({
        where: params,
        select: {
          createdAt: true,
          id: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/batchRunRecords")
  @ApiNestedQuery(BatchRunRecordFindManyArgs)
  async findBatchRunRecords(
    @common.Req() request: Request,
    @common.Param() params: BatchRunWhereUniqueInput
  ): Promise<BatchRunRecord[]> {
    const query = plainToClass(BatchRunRecordFindManyArgs, request.query);
    const results = await this.service.findBatchRunRecords(params.id, {
      ...query,
      select: {
        batchRun: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        priceRecord: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/batchRunRecords")
  async connectBatchRunRecords(
    @common.Param() params: BatchRunWhereUniqueInput,
    @common.Body() body: BatchRunRecordWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      batchRunRecords: {
        connect: body,
      },
    };
    await this.service.updateBatchRun({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/batchRunRecords")
  async updateBatchRunRecords(
    @common.Param() params: BatchRunWhereUniqueInput,
    @common.Body() body: BatchRunRecordWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      batchRunRecords: {
        set: body,
      },
    };
    await this.service.updateBatchRun({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/batchRunRecords")
  async disconnectBatchRunRecords(
    @common.Param() params: BatchRunWhereUniqueInput,
    @common.Body() body: BatchRunRecordWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      batchRunRecords: {
        disconnect: body,
      },
    };
    await this.service.updateBatchRun({
      where: params,
      data,
      select: { id: true },
    });
  }
}
